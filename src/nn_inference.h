//////////////////////////////////////////////////////////////////////////////////
// Author:          Zhantong Zhu
// Created Date:    2025-04-28
// Description:     Neural network inference header
//////////////////////////////////////////////////////////////////////////////////

#ifndef NN_INFERENCE_H
#define NN_INFERENCE_H

#include <stdint.h>

// Neural network dimensions
#define NUM_SENSORS 14
#define INPUT_DIM 2 * NUM_SENSORS // 14 temp + 14 power encodings
#define HIDDEN_DIM 64
#define OUTPUT_DIM NUM_SENSORS // Future temperature predictions

// Weight values
// Start from 0x60002238
static const int8_t layer_0_weights[INPUT_DIM * HIDDEN_DIM] = {
    // Each row has 64 elements (HIDDEN_DIM)
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    // ... (more weights for the rest of the rows)
};

// Second layer weights (HIDDEN_DIM × OUTPUT_DIM = 64 × 14)
static const int8_t layer_1_weights[HIDDEN_DIM * OUTPUT_DIM] = {
    // Each row has 14 elements (OUTPUT_DIM)
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
};


// Quantization functions
/**
 * Convert uint32_t to quantized int8_t
 * @param value Raw uint32_t value
 * @param scale_factor Scaling factor in fixed point
 * @param shift_width Bit shift for fixed-point scaling
 * @param zero_point Zero point offset for quantization
 * @return Quantized int8_t value
 */
int8_t quantize_u32_to_i8(uint32_t value, uint16_t scale_factor, uint16_t shift_width, int8_t zero_point);

/**
 * Dequantize int32_t result to uint32_t output
 * @param value Quantized int32_t value
 * @param scale_factor Scaling factor in fixed point
 * @param shift_width Bit shift for fixed-point scaling
 * @param zero_point Zero point offset for dequantization
 * @return Dequantized uint32_t value
 */
uint32_t dequantize_i32_to_u32(int32_t value, uint16_t scale_factor, uint16_t shift_width, int32_t zero_point);

/**
 * ReLU activation function for int32_t array
 * @param data Pointer to int32_t data array
 * @param size Size of the array
 */
void relu_i32(int32_t* data, int size);

/**
 * Run neural network inference
 */
void run_model_inference(void);

#endif  // NN_INFERENCE_H
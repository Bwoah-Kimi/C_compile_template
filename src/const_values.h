//////////////////////////////////////////////////////////////////////////////////
// Author:          Zhantong Zhu
// Acknowledgement: GitHub Copilot
// Description:     Header file to store constant values used in chip testing.
//////////////////////////////////////////////////////////////////////////////////

#ifndef ADDRESS_MAP_H
#define ADDRESS_MAP_H

#include <stdint.h>

//////////////////////////////////////////////////
// Power switch configurations
// 14 power switches, each 8-bit configuration
//////////////////////////////////////////////////
static const uint8_t power_switch_config[14] = {
    0b00100000,  // Power switch 0
    0b00100000,  // Power switch 1
    0b00100000,  // Power switch 2
    0b00100000,  // Power switch 3
    0b00100000,  // Power switch 4
    0b00100000,  // Power switch 5
    0b00100000,  // Power switch 6
    0b00100000,  // Power switch 7
    0b00100000,  // Power switch 8
    0b00100000,  // Power switch 9
    0b00100000,  // Power switch 10
    0b00100000,  // Power switch 11
    0b00100000,  // Power switch 12
    0b00100000   // Power switch 13
};

#define NUM_POWER_SWITCHES 14

//////////////////////////////////////////////////
// Sensor weight values
// Start from 0x60002238
//////////////////////////////////////////////////
__attribute__((section(".sensor_weight"))) static const int64_t sensor_weight[22] = {
    1120538,
    -3316961,
    578850,
    -472836,
    2391,
    246,
    81,
    -951,
    -196,
    809,
    0b00000000111011001010111000000110,
    0b11111111001001001101100101101000,
    0b11111111111000000000000111001011,
    0b00000000000000000000010010010010,
    0b00000000000000000010011111101100,
    0b00000000000000000000010010111001,

    0b00000110001110011001111100101101,
    0b11100101110010001011001110111110,
    0b00000010010011011111100011111101,
    0b00000000000001101100110000100100,
    0b11111111111111101110001010111101,
    0b11111111111111111111111110111000
};


//////////////////////////////////////////////////
// Neural network inference
//////////////////////////////////////////////////
// Neural network dimensions
#define NUM_SENSORS 14
#define INPUT_DIM 2 * NUM_SENSORS // 14 temp + 14 power encodings
#define HIDDEN_DIM 64
#define OUTPUT_DIM NUM_SENSORS // Future temperature predictions

// Weight values
// Start from 0x60002238
static const int8_t layer_0_weights[INPUT_DIM * HIDDEN_DIM] = {
    // Each row has 64 elements (HIDDEN_DIM)
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31, 32, -33, 34, -35, 36, -37, 38, -39, 40, -41, 42, -43, 44, -45, 46, -47, 48, -49, 50, -51, 52, -53, 54, -55, -56, 57, -58, 59, -60, 61, -62, 63, -64,
    // ... (more weights for the rest of the rows)
};

// Second layer weights (HIDDEN_DIM × OUTPUT_DIM = 64 × 14)
static const int8_t layer_1_weights[HIDDEN_DIM * OUTPUT_DIM] = {
    // Each row has 14 elements (OUTPUT_DIM)
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
    10, 5, -8, 3, -12, 7, -2, 14, -6, 9, -4, 11, -7, 2,
    -5, 13, -9, 4, -1, 8, -15, 3, -7, 12, -4, 6, -10, 8,
    3, -11, 6, -2, 9, -5, 12, -8, 4, -10, 7, -3, 14, -6,
    -7, 2, -13, 8, -4, 11, -1, 6, -9, 3, -5, 15, -8, 4,
};

////////////////////////////////////////////////
// Address Mapping Definitions
////////////////////////////////////////////////
#define TOP_CONFIG_REGFILE_BASE_ADDR  0x60002218

#define RL_CONFIG_REGFILE_BASE_ADDR 0x60000000

#define Q_TABLE_0_BASE_ADDR 0x60000018
#define Q_TABLE_1_BASE_ADDR 0x60001018

#define QUANT_CONFIG_REGFILE_BASE_ADDR 0x60002018
#define DEQUANT_CONFIG_REGFILE_BASE_ADDR 0x60002118

#define SENSOR_WEIGHT_BUFFER_BASE_ADDR 0x60002238
#define SENSOR_FREQ_BUFFER_BASE_ADDR 0x60002338
#define SENSOR_ENCODINGS_BASE_ADDR 0x60005000
#define SENSOR_PRED_BASE_ADDR 0x60006000

#define RL_ACTION_BASE_ADDR 0x60006100

#define CPU_START_FLAG_ADDR 0x60007000
#define CPU_FINISH_FLAG_ADDR 0x60007008

#define CPU_COMPUTE_PERF_COUNTER_ADDR 0x60008000
#define CPU_STORE_SENSOR_PERF_COUNTER_ADDR 0x60008008
#define CPU_STORE_PRED_PERF_COUNTER_ADDR 0x60008010
#define CPU_STORE_ACTION_PERF_COUNTER_ADDR 0x60008018

#define POWER_SWITCH_BASE_ADDR 0x40d00000

#define CPU_COMPUTE_START_FLAG 0x00000000A5A5A5A5
#define CPU_COMPUTE_FINISH_FLAG 0x5A5A5A5A00000000
#define CPU_STORE_SENSOR_START_FLAG 0x00000000B1B1B1B1
#define CPU_STORE_SENSOR_FINISH_FLAG 0x1B1B1B1B00000000
#define CPU_STORE_PRED_START_FLAG 0x00000000C2C2C2C2
#define CPU_STORE_PRED_FINISH_FLAG 0x2C2C2C2C00000000
#define CPU_STORE_ACTION_START_FLAG 0x00000000D3D3D3D3
#define CPU_STORE_ACTION_FINISH_FLAG 0x3D3D3D3D00000000

#endif // ADDRESS_MAP_H